:source-highlighter: pygments
:toc: left
:toc-title: Conteúdo
:toc-levels: 4
:sectnums:
:dialect: latex

= Exercícios de Processamento Digital de Imagens =
Victor Emanuel <victorers2@gmail.com> e Vinícius Aguiar <vmaguiar@hotmail.com>

== Unidade 1
=== Trabalhando com regiões
==== Negativo da região
Esse programa derevá solicitar ao usuário as coordenadas de dois pontos localizados dentro dos limites do tamanho da imagem. $P_{1}$ e $P_{2}$ serão interpretados como os vértices opostos de um retângulo, que será exibido com a cor negativa no interior.

.regions.cpp
[source, cpp]
----
include::Unidade 1/regions.cpp[]
----

O programa apenas exibe o resultado quando executado, não salva-o. A imagem a seguir mostra a saída para $P_{1} = (50, 50)$ e $P_{2} = (200, 200)$. Note que o usuário pode digitar pontos quaisquer pois o programa verifica qual é o superior esquerdo e o inferior direito.
.Resultado de regions.cpp
image::img/regions.jpg[]


==== Translada quadrantes
O próximo, chamado de 'trocaregioes.cpp', deverá trocar os quadrantes em diagonal na imagem.

.trocaRegioes.cpp
[source, cpp]
----
include::Unidade 1/trocaRegioes.cpp[]
----

Este salva o resultado na mesma pasta em que foi executado. Abaixo uma comparação da imagem original com resultado de trocaRegioes.cpp
[.clearfix]
--
.Original
[.left]
image::img/biel.png[]
.Processada
[.left]
image::Unidade 1/resultado.png[]
--

=== Preechendo Regiões
==== Conta Bolhas e buracos
.labeling.cpp
[source, cpp]
----
include::Unidade 1/labeling.cpp[]
----

Saída em texto: `Foram encontradas 21 bolhas, 7 com buraco`. OBS.: uma das bolhas tem um buraco de apenas 3 pixels não perceptível numa contagem rápida.
O programa salva as imagens geradas para fazer o processamento. Serão exibidas abaixo.
[.clearfix]
--
[.left]
.Original
image::img/bolhas.png[]
.Sem bolhas na borda
[.left]
image::Unidade 1/semborda.png[]
--
[.clearfix]
--
.Bolhas em tons de cinza
[.left]
image::Unidade 1/resultBolhas.png[]
.Buracos em tons de cinza
[.left]
image::Unidade 1/buracos.png[]
--

=== Histogramas
==== Equalização
O programa abaixo deve equalizar o histograma das imagens capturadas pela webcam. A função responsável por esse trabalho é a https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization.html[Histogram Equalization], nativa do OpenCV.

.equalize.cpp
[source, cpp]
----
include::Unidade 1/equalizeCam.cpp[]
----

Resultados em breve.

==== Detector de movimento
O segundo programa deve realizar a tarefa de um detector de movimento usando apenas os histogramas de uma imagem atual e da anterior. A comparação é feita usando a função nativa do OpenCV disponível neste link https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/histogram_comparison/histogram_comparison.html[Histogram Comparison]

.movimentoCam.cpp
[source, cpp]
----
include::Unidade 1/movimento.cpp[]
----

A saída do programa, além da imagem capturada pela webcam, é a indicação se houve movimento no momento em que é detectada. A função `compareHist()` retorna um `float` no intervalo de 0 a 1 que resulta do método de comparação usada. No código acima foi a "Bhattacharyya distance", dada por:

image::https://docs.opencv.org/2.4/_images/math/2962ee11d544acbb1a5f97d00a4a8bd24a4e1e11.png[Bhattacharyya distance, align="center"] 

=== Filtragem no domínio Espacial


